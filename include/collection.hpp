#ifndef COLLECTION_HPP
#define COLLECTION_HPP

#include <functional>
#include <map>
#include <string>
#include <vector>

#include "request.hpp"
#include "response.hpp"
#include "route.hpp"

namespace router {

/**
 * Represents a collection of routes, providing functionality to add, retrieve,
 * handle, and remove routes.
 */
class Collection {
 public:
  /**
   * Adds a new route to the collection.
   *
   * @param method The HTTP method (e.g., GET, POST) for the route.
   * @param path The URL path for the route.
   * @param handler The function to be executed when the route is matched.
   */
  void addRoute(
      const std::string &method, const std::string &path,
      const std::function<http::Response(const http::Request &)> &handler);

  /**
   * Retrieves a route from the collection.
   *
   * @param method The HTTP method (e.g., GET, POST) for the route.
   * @param path The URL path for the route.
   * @return The matching route if found.
   */
  const Route &getRoute(const std::string &method,
                        const std::string &path) const;

  /**
   * Handles an incoming HTTP request by matching it against the registered
   * routes and executing the corresponding handler.
   *
   * @param request The incoming HTTP request to be handled.
   * @return The HTTP response generated by the matched route's handler.
   */
  http::Response handleRequest(const http::Request &request) const;

  /**
   * Removes a route from the collection.
   *
   * @param method The HTTP method (e.g., GET, POST) for the route.
   * @param path The URL path for the route.
   */
  void removeRoute(const std::string &method, const std::string &path);

 private:
  std::vector<Route>
      routes;  ///< A collection of all routes registered in the collection.
};

}  // namespace router

#endif  // COLLECTION_HPP
